version: 2.1
orbs:
    slack: circleci/slack@4.1
commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        steps:
            - run:
                  name: Destroy environments
                  when: on_fail
                  command: |
                    aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID}
    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
        # Add parameter here
        steps:
            - run:
                  name: Revert migrations
                  # Add when this will run
                  command: |
                      # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                      SUCCESS = 1
                      if(( $SUCCESS==1 ));
                      then
                      #  cd ~/project/backend
                      #  npm install
                      #  Add revert code here. You can find this in the Getting Started section.
                        exit 1
                      fi
   
jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-dependencies]
            - run:
                  name: Build front-end
                  command: |
                      cd ~/project/frontend
                      npm i
                      npm run build
            - save_cache:
                  paths: [frontend/node_modules]
                  key: frontend-dependencies
    
    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-dependencies]
            - run:
                  name: Back-end build
                  command: |
                      cd ~/project/backend
                      npm i
                      npm run build
            - save_cache:
                  paths: [backend/node_modules]
                  key: backend-dependencies
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [frontend-dependencies]
            - run:
                  name: Test Frontend
                  command: |
                      cd ~/project/frontend
                      npm i
                      npm run test
    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                  keys: [backend-dependencies]
            - run:
                  name: Test Backend
                  command: |
                        cd ~/project/backend
                        npm i
                        npm run test
    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                  name: Scan frontend
                  command: |
                      cd ~/project/frontend
                      npm audit fix --audit-level=critical --force
            - slack/notify:
                event: fail
                mentions: '@dev'
                template: basic_fail_1
            - slack/notify:
                event: pass
                template: basic_success_1
    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - run:
                  name: Scan backend
                  command: |
                      cd ~/project/backend
                      npm audit --audit-level=critical
            - slack/notify:
                event: fail
                mentions: '@dev'
                template: basic_fail_1
            - slack/notify:
                event: pass
                template: basic_success_1
    deploy-infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensure back-end infrastructure exists
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                #--tags project=your-tag \
                # --stack-name backend-${CIRCLE_WORKFLOW_ID} \
                # --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                #--tags project=your-tag \
                # --stack-name frontend-${CIRCLE_WORKFLOW_ID} \
                # --parameter-overrides ID=${CIRCLE_WORKFLOW_ID}
        - run:
            name: Add back-end ip to ansible inventory
            command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> udapeople/.circleci/ansible/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - udapeople/.circleci/ansible/inventory.txt
        - destroy-environment
workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                  requires: [build-frontend]
            - test-backend:
                  requires: [build-backend]
            - scan-frontend:
                  requires: [build-frontend]
            - scan-backend:
                  requires: [build-backend]
            - deploy-infrastructure:
                requires: [build-backend, build-frontend]